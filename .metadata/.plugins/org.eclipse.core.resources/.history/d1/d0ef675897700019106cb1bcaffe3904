package top.pyg.manager.service.impl;


import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;

import com.alibaba.dubbo.config.annotation.Service;
import com.github.miemiedev.mybatis.paginator.domain.Paginator;
import com.github.pagehelper.PageHelper;
import com.github.pagehelper.PageInfo;

import top.pyg.manager.service.BrandService;
import top.pyg.mapper.TbBrandMapper;
import top.pyg.pojo.TbBrand;
import top.pyg.pojo.TbBrandExample;
import top.pyg.pojo.TbBrandExample.Criteria;
import top.pyg.utils.PageResult;
import top.pyg.utils.Result;
@Service
public class BrandServiceImpl implements BrandService {
/**
 * 注入mapper接口的代理对象
 */
	@Autowired
	private TbBrandMapper brandMapper;
	
	@Override
	public List<TbBrand> findAll() {
		//创建example对象
		TbBrandExample example = new TbBrandExample();
		
		//查询
		List<TbBrand> list = brandMapper.selectByExample(example);
		return list;
	}
	
	@Override
	public PageResult findPage(Integer page, Integer rows) {
		//创建example对象
		TbBrandExample example = new TbBrandExample();
		// 使用插件设置分页
		PageHelper.startPage(page, rows);
		//查询品牌数据
		//List={page[total,pagesie],list}
		List<TbBrand> list = brandMapper.selectByExample(example);
		//创建pageINfo对象,获取查询分页数据
		PageInfo<TbBrand> pageInfo = new PageInfo<TbBrand>(list);
		
		return new PageResult(pageInfo.getTotal(), list);
	}

	@Override
	public Result add(TbBrand brand) {
		try {
			brandMapper.insertSelective(brand);
			return new Result(true, "新建成功");
		} catch (Exception e) {
			e.printStackTrace();
			return new Result(false, "新建失败");
		}
		
	}

	@Override
	public TbBrand findOne(Long id) {
		TbBrand brand = brandMapper.selectByPrimaryKey(id);
		return brand;
	}

	@Override
	public Result update(TbBrand brand) {
		try {
			brandMapper.updateByPrimaryKey(brand);
			return new Result(true, "修改成功");
		} catch (Exception e) {
			e.printStackTrace();
			return new Result(false, "修改失败");
		}
		
	}

//	@Override
//	public void delete(Long[] ids) {
//		for (Long id : ids) {
//			brandMapper.deleteByPrimaryKey(id);
//		}
//		
//	}

	@Override
	public PageResult findBrandByPage(TbBrand brand, Integer pageNum, Integer pageSize) {
		TbBrandExample example = new TbBrandExample();
		Criteria criteria = example.createCriteria();
		if(brand.getName()!=null && !"".equals(brand.getName())) {
			//模糊查询
			criteria.andNameLike("%"+brand.getName()+"%");
		}
		if(brand.getFirstChar()!=null && !"".equals(brand.getFirstChar())) {
			criteria.andFirstCharEqualTo(brand.getFirstChar());
		}
		
		//设置分页
		PageHelper.startPage(pageNum, pageSize);
		//分页结果信息
		List<TbBrand> list = brandMapper.selectByExample(example);
		PageInfo<TbBrand> pageInfo = new PageInfo<TbBrand>(list);
		return new PageResult(pageInfo.getTotal(), list);
	}

 
}
